//
//  QuizViewController.swift
//  LearnWithMe
//
//  Created by Zvonimir Medak on 10.12.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import Combine
import CombineCocoa
import CombineExt

final class QuizViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: QuizPresenterInterface!

    // MARK: - IBOutlets -

    @IBOutlet var questionNumberLabel: UILabel!
    @IBOutlet var questionLabel: UILabel!
    @IBOutlet var answerTextField: UITextField!
    @IBOutlet var nextButton: UIButton!
    @IBOutlet var scrollView: UIScrollView!
    @IBOutlet var backButton: UIButton!

    // MARK: - Private properties -

    private var subscriptions: Set<AnyCancellable> = []

    private lazy var tapGestureRecognizer: UITapGestureRecognizer = {
        let recognizer = UITapGestureRecognizer()
        view.addGestureRecognizer(recognizer)
        return recognizer
    }()

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }

}

// MARK: - Extensions -

extension QuizViewController: QuizViewInterface {
}

// MARK: - Private methods

private extension QuizViewController {

    func setupView() {
        let output = Quiz.ViewOutput(
            answer: answerTextField.textPublisher.print("text").asSignal(),
            next: nextButton.tapPublisher
        )

        let input = presenter.configure(with: output)
        handle(endEditingAction: tapGestureRecognizer.tapPublisher.asDriver())
        handle(back: backButton.tapPublisher.asSignal())
        configure(input.configurator)
        setupKeyboardHandling()
    }

}

private extension QuizViewController {

    func configure(_ configurator: Driver<QuizConfigurator>) {
        configurator
            .map(\.question.number)
            .handleEvents(receiveOutput: { [unowned nextButton] in $0 == 5 ? nextButton?.setTitle("Finish", for: .normal) : nextButton?.setTitle("Next", for: .normal) })
            .map { "Question \($0)/5" }
            .assign(to: \.text, on: questionNumberLabel)
            .store(in: &subscriptions)

        configurator
            .map(\.question.text)
            .assign(to: \.text, on: questionLabel)
            .store(in: &subscriptions)
    }

    func handle(endEditingAction: Driver<UITapGestureRecognizer>) {
        endEditingAction
            .map { _ in return () }
            .sink(receiveValue: { [unowned self] in view.endEditing(true) })
            .store(in: &subscriptions)
    }

    func setupKeyboardHandling() {

        let keyboardPresentationHandler: (KeyboardHandler.PresentingParams) -> Void = { [unowned self] params in
            let height = params.state == .show ? params.keyboardSize.height + 8 : params.keyboardSize.height
            let indicatorHeight = params.state == .show ? height - view.safeAreaInsets.bottom - 8 : height

            scrollView.contentInset.bottom = height
            scrollView.verticalScrollIndicatorInsets.bottom = indicatorHeight

            view.layoutIfNeeded()
        }

        KeyboardHandler
            .register(animatedHandler: keyboardPresentationHandler)
            .store(in: &subscriptions)
    }

    func handle(back: Signal<Void>) {
        back
            .sink(receiveValue: { [unowned self] in navigationController?.popViewController(animated: true) })
            .store(in: &subscriptions)
    }
}
