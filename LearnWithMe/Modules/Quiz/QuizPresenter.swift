//
//  QuizPresenter.swift
//  LearnWithMe
//
//  Created by Zvonimir Medak on 10.12.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import Combine
import CombineExt
import CombineCocoa

final class QuizPresenter {

    // MARK: - Private properties -

    private unowned let view: QuizViewInterface
    private let interactor: QuizInteractorInterface
    private let wireframe: QuizWireframeInterface

    private let questionDifficulty: QuestionDifficulty
    private var currentQuestion = 1

    private var subscriptions: Set<AnyCancellable> = []
    // MARK: - Lifecycle -

    init(
        view: QuizViewInterface,
        interactor: QuizInteractorInterface,
        wireframe: QuizWireframeInterface,
        questionDifficulty: QuestionDifficulty
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe

        self.questionDifficulty = questionDifficulty
    }
}

// MARK: - Extensions -

extension QuizPresenter: QuizPresenterInterface {

    func configure(with output: Quiz.ViewOutput) -> Quiz.ViewInput {
        let configurator = ReplaySubject<QuizConfigurator, Never>(bufferSize: 1)
        handle(next: output.next, answer: output.answer, configurator: configurator)
        handleInitialLoad(configurator)
        return Quiz.ViewInput(configurator: configurator.asDriver())
    }

}

// MARK: - Private methods -

private extension QuizPresenter {

    func handle(
        next: AnyPublisher<Void, Never>,
        answer: Signal<String?>,
        configurator: ReplaySubject<QuizConfigurator, Never>
    ) {
        next
            .withLatestFrom(answer)
            .handleEvents(receiveOutput: { [unowned interactor] in interactor.save($0 ?? "") })
            .map { [unowned interactor] _ in interactor.nextQuestion }
            .sink(receiveValue: { [unowned self] in $0.isBlank ? wireframe.showAlert(with: "Result", message: interactor.result, completion: { wireframe.popToViewController() }) : configurator.send(QuizConfigurator(question: $0!)) })
            .store(in: &subscriptions)
    }

    func handleInitialLoad( _ configurator: ReplaySubject<QuizConfigurator, Never>) {
        guard let question = interactor.nextQuestion else { return }
        configurator.send(QuizConfigurator(question: question))
    }
}
