//
//  HomeViewController.swift
//  LearnWithMe
//
//  Created by Zvonimir Medak on 05.12.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import Combine

final class HomeViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: HomePresenterInterface!

    // MARK: - IBOutlets -

    @IBOutlet private var pickerView: UIPickerView! {
        didSet {
            pickerView.alpha = 0
        }
    }

    @IBOutlet private var collectionView: UICollectionView! {
        didSet {
            collectionView.contentInset = .init(top: 0, left: 0, bottom: 40, right: 0)
        }
    }
    
    // MARK: - Private properties -

    private var subscriptions: Set<AnyCancellable> = []

    private lazy var collectionDataSourceDelegate: CollectionDataSourceDelegate = {
        return CollectionDataSourceDelegate(collectionView: collectionView)
    }()

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }

}

// MARK: - Extensions -

extension HomeViewController: HomeViewInterface {

    func showPickerView(_ item: HomeCollectionCellItem) {
        pickerView.delegate = item
        pickerView.dataSource = item
        pickerView.isHidden = false
        UIView.animate(
            withDuration: 0.5,
            animations: { self.pickerView.alpha = 1 }
        )
    }

    func hidePickerView() {
        UIView.animate(
            withDuration: 0.5,
            animations: { self.pickerView.alpha = 0 },
            completion: { _ in self.pickerView.isHidden = true }
        )
    }
}

// MARK: - Private methods -

private extension HomeViewController {

    func setupView() {
        let output = Home.ViewOutput()

        let input = presenter.configure(with: output)
        handle(input.items)
    }

}

private extension HomeViewController {

    func handle(_ items: AnyPublisher<[CollectionCellItem]?, Never>) {
        items
            .assign(to: \.items, on: collectionDataSourceDelegate)
            .store(in: &subscriptions)
    }
}
