//
//  HomePresenter.swift
//  LearnWithMe
//
//  Created by Zvonimir Medak on 05.12.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import Combine
import CombineExt

final class HomePresenter {

    // MARK: - Private properties -

    private unowned let view: HomeViewInterface
    private let interactor: HomeInteractorInterface
    private let wireframe: HomeWireframeInterface

    private var subscriptions: Set<AnyCancellable> = []

    // MARK: - Lifecycle -

    init(
        view: HomeViewInterface,
        interactor: HomeInteractorInterface,
        wireframe: HomeWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension HomePresenter: HomePresenterInterface {

    func configure(with output: Home.ViewOutput) -> Home.ViewInput {
        let categorySelected: PassthroughRelay<HomeCollectionCellItem> = .init()
        let difficultySelected: PassthroughRelay<QuestionDifficulty?> = .init()
        handle(categorySelected)
        handle(difficultySelected)
        return Home.ViewInput(
            items: initializeItems(categorySelected: categorySelected, difficultySelected: difficultySelected)
        )
    }

}

// MARK: - Private methods -

private extension HomePresenter {

    func initializeItems(
        categorySelected: PassthroughRelay<HomeCollectionCellItem>,
        difficultySelected: PassthroughRelay<QuestionDifficulty?>
    ) -> AnyPublisher<[CollectionCellItem]?, Never> {
        return interactor
            .categoriesPublisher
            .handleLoadingAndError(with: view)
            .map { $0.map {
                HomeCollectionCellItem(
                    category: $0,
                    categorySelected: categorySelected,
                    difficultySelected: difficultySelected
                )
            }}
            .replaceError(with: nil)
            .eraseToAnyPublisher()
    }

    func handle(_ categorySelected: PassthroughRelay<HomeCollectionCellItem>) {
        categorySelected
            .sink(receiveValue: { [unowned view] in view.showPickerView($0) }) 
            .store(in: &subscriptions)
    }

    func handle(_ difficultySelected: PassthroughRelay<QuestionDifficulty?>) {
        difficultySelected
            .throttle(for: .seconds(1), scheduler: RunLoop.main, latest: false)
            .sink(receiveValue: { [unowned self] questionDifficulty in
                view.hidePickerView()
                guard let questionDifficulty = questionDifficulty else {
                    return
                }
                wireframe.navigateToLearning(questionDifficulty)
            })
            .store(in: &subscriptions)
    }
}
