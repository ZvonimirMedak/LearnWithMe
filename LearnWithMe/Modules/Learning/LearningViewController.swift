//
//  LearningViewController.swift
//  LearnWithMe
//
//  Created by Zvonimir Medak on 12.12.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import Combine
import CombineCocoa
import CombineExt

final class LearningViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: LearningPresenterInterface!

    // MARK: - IBOutlets -

    @IBOutlet private var backButton: UIButton!
    @IBOutlet private var definitionLabel: UILabel!
    @IBOutlet private var answerLabel: UILabel!
    @IBOutlet private var previousButton: UIButton!
    @IBOutlet private var nextButton: UIButton!
    @IBOutlet private var takeQuizButton: UIButton!

    // MARK: - Private properties -

    private var subscriptions: Set<AnyCancellable> = []

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }

}

// MARK: - Extensions -

extension LearningViewController: LearningViewInterface {
}

private extension LearningViewController {

    func setupView() {
        let output = Learning.ViewOutput(
            previous: previousButton.tapPublisher.asSignal(),
            next: nextButton.tapPublisher.asSignal(),
            takeQuiz: takeQuizButton.tapPublisher.asSignal()
        )
        handle(backButton.tapPublisher.asSignal())
        let input = presenter.configure(with: output)
        configure(input.configurator)
    }

}

// MARK: - Private methods -

private extension LearningViewController {
    func configure(_ configurator: Driver<LearningConfigurator>) {
        configurator
            .map(\.answer)
            .assign(to: \.text, on: answerLabel)
            .store(in: &subscriptions)

        configurator
            .map(\.definition)
            .assign(to: \.text, on: definitionLabel)
            .store(in: &subscriptions)

        configurator
            .map(\.position)
            .sink(receiveValue: { [unowned self] in
                switch $0 {
                case .first:
                    previousButton.isHidden = true
                    nextButton.isHidden = false
                case .middle:
                    previousButton.isHidden = false
                    nextButton.isHidden = false
                    takeQuizButton.isHidden = true
                case .last:
                    nextButton.isHidden = true
                    previousButton.isHidden = false
                    takeQuizButton.isHidden = false
                }
            })
            .store(in: &subscriptions)
    }

    func handle(_ back: Signal<Void>) {
        back
            .sink(receiveValue: { [unowned self] in navigationController?.popViewController(animated: true) })
            .store(in: &subscriptions)
    }
}
